// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Project {
  id            String        @id @default(cuid())
  title         String
  subTitle      String?
  description   String
  technologies  String[]
  status        ProjectStatus @default(DRAFT)
  featured      Boolean
  sourceCodeUrl String?
  liveUrl       String?
  gallery       String[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Skill {
  id        String   @id @default(cuid())
  title     String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     Int      @default(100) // 1 to 5, where 5 is the highest level
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PersonalInfo {
  id          String   @id @default(cuid())
  name        String   @default("Md Sarowar Hossain ")
  description String   @default("I am a passionate web developer with a focus on creating dynamic and responsive web applications. I love to learn new technologies and improve my skills.")
  email       String   @unique @default("sarowarhosen03@gmail.com")
  phone       String?  @default("+880 1790-000000")
  location    String?  @default("Dhaka, Bangladesh")
  imageUrl    String?
  socialLinks Json     @default("[]")
  cvUrl       String?
  resumeUrl   String?
  status      String   @default("available")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// auth-js
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
